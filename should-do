#!/usr/bin/perl
use strict;
use warnings;

# Header to be printed (into the README file)
my $header = <<END;
NOTE: this file was **generated** by `$0`.

You earn your living by having enough knowledge (theory) and experience
(practice). However, these are expiring assets so you have to keep them fresh.
While honing your knowledge keep in mind these principles (based on The Pragmatic Programmer):

* Invest regularly - the *habit* itself is as important as the amount
* Diversify - know the ins and outs of the technology you are working with
  currently but *don't stop* there
* Review and rebalance

The skills you should be working on:

END

# Skills I want to have
my @skills = qw(
  Algorithms
  Tools
  Linux
  Bash
  Perl
  Python
  Net
  Sec
  Mngt
);

# Activities that help me hone the skills
my %activity_weight = (
    'wrote_q&a'  => 1,     # ~ 1 pomodoro, i.e. 25 mins
    wrote_blog   => 2,
    wrote_script => 4,
    read_book    => 30,    # ~ 30 pomodoros, i.e. 12.5 hour
    wrote_prog   => 30,
);

# What I have done
my $activities_file = shift;
die "Usage: $0 activities.txt\n" unless defined $activities_file;
open my $FH, $activities_file or die "Can't open $activities_file: $!\n";

# Read in all my activities and related data
my %activities;
while (<$FH>) {
    next if /^\s*#/;
    chomp;
    my ( $skills, $activity, $url, $date ) = split /\|/;
    die
      "Unknown activity '$activity' at line $. of '$activities_file' file. Exiting ...\n"
      unless grep $activity eq $_, keys %activity_weight;
    for my $skill ( split /,/, $skills ) {
        die "You don't need '$skill' skill. Exiting ...\n"
          unless grep $skill eq $_, @skills;
        push @{ $activities{$skill} },
          { name => $activity, url => $url, date => $date };
    }
}

close $FH;

# Calculate score per skill based on the activities weight
my %score;
for my $skill (@skills) {
    $score{$skill} = 0 if not exists $activities{$skill};
    for my $activity ( @{ $activities{$skill} } ) {
        $score{$skill} += $activity_weight{ $activity->{name} };
    }
}

#use Data::Dumper;
#print '%score', "\n";
#print Dumper \%score;
#print '%activities', "\n";
#print Dumper \%activities;
#exit;

# Sort skills by score, last activity date and skill name

# Print out skills and activities in Markdown format
print $header;
for my $skill ( sort { $score{$a} <=> $score{$b} or $a cmp $b }
    keys %score )
{
    print "* $skill ($score{$skill}): ";
    my @activities;
    for ( @{ $activities{$skill} } ) {
        my $url = $_->{url} =~ /^http/
          ? "[$_->{name}]($_->{url})"   # real URL
          : "$_->{name} ($_->{url})";   # note, script name, book title, ...
        push @activities, "$_->{date} - $url";
    }
    print join ", ", @activities;
    print "\n";
}
