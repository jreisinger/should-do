#!/usr/bin/perl
use strict;
use warnings;

# Skills I want to hone
my @wanted_skills = qw(
  Algorithms
  Linux
  Net
  Python
  Sec
);

# Activities that help me hone the skills
my %activity_weight = (
    'wrote_q&a'   => 1,     # ~ 1 pomodoro, i.e. 25 mins
    wrote_blog    => 2,
    wrote_script  => 4,
    read_book     => 30,    # ~ 30 pomodoros, i.e. 12.5 hour
    wrote_prog    => 30,
    attended_conf => 60,
    got_cert      => 60,
);

# What I have done
my $activities_file = shift;
die "Usage: $0 activities.txt\n" unless defined $activities_file;
open my $FH, $activities_file or die "Can't open $activities_file: $!\n";

# Read in all the activities I have done
my %activities;
while (<$FH>) {
    next if /^\s*#/;
    chomp;
    my ( $skills, $activity, $url, $date ) = split /\|/;
    die
      "Unknown activity '$activity' at line $. of '$activities_file' file. Exiting ...\n"
      unless grep $activity eq $_, keys %activity_weight;
    for my $skill ( split /,/, $skills ) {
        push @{ $activities{$skill} },
          { name => $activity, url => $url, date => $date };
    }
}
close $FH;

# Calculate rating per skill
my %rating;
for my $skill (keys %activities, @wanted_skills) { # all skills
    $rating{$skill}{score} = 0;
    $rating{$skill}{last_date} = "";

    for my $activity ( @{ $activities{$skill} } ) {
        $rating{$skill}{score} += $activity_weight{ $activity->{name} };
        $rating{$skill}{last_date} = $activity->{date}
            if $activity->{date} gt $rating{$skill}{last_date};
    }
}

# Sort skills by activities score, last activity date and skill name
my @sorted_skills =
    sort    {
                $rating{$a}{score} <=> $rating{$b}{score} or
                $rating{$a}{last_date} cmp $rating{$b}{last_date} or
                $a cmp $b
            } keys %rating;

# Print out skills and activities in Markdown format ...

my $activities =    join ", ",
                    map "$_ ($activity_weight{$_})",
                    sort {
                            $activity_weight{$b} <=> $activity_weight{$a}
                                ||
                            $a cmp $b
                         } keys %activity_weight;

# Header to be printed out (into the README.md file)
my $header = <<END;
NOTE: this file was **generated** by `$0`.

You earn your living by having enough knowledge (theory) and experience
(practice). However, these are expiring assets so you have to keep them fresh.
While honing your knowledge keep in mind these principles (based on The Pragmatic Programmer):

* Invest regularly - the *habit* itself is as important as the amount
* Diversify - know the ins and outs of the technology you are working with
  currently but *don't stop* there
* Review and rebalance
* Stay current - read news, take classes, go to conferences
* Contribute - QaA, blogs, code

The following activities are being tracked here: $activities.
END

print $header;

print "\nThe skills you should be working on:\n\n";
for my $skill ( @sorted_skills )
{
    next unless grep $skill eq $_, @wanted_skills;
    print_skill($skill);
}

print "\nYou have also done:\n\n";
for my $skill ( reverse @sorted_skills )
{
    next if grep $skill eq $_, @wanted_skills;
    print_skill($skill);
}

# Functions ...

sub print_skill {
    my $skill = shift;

    print "* $skill ($rating{$skill}{score}): ";
    my @activities;
    for ( @{ $activities{$skill} } ) {
        my $url = $_->{url} =~ /^http/
          ? "[$_->{name}]($_->{url})"   # real URL
          : "$_->{name} ($_->{url})";   # note, script name, book title, ...
        push @activities, "$_->{date} - $url";
    }
    print join ", ", @activities;
    print "\n";
}
